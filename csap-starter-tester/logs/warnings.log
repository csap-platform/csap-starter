2017-09-15 15:52:58,368 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-09-15 15:52:59,040 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-09-15 15:52:59,042 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:hsqldb:mem:testdb
 getUsername: sa
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 25
 Max Total Connections: 5
 getInitialSize: 0
 
==========================



2017-09-15 15:53:01,010 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-09-15 15:53:01,982 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-09-15 15:53:02,110 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-09-15 15:53:02,807 ==== Csap_Tester_Application.java ==== thread: restartedMain ==== WARN    >
org.sample.Csap_Tester_Application.addResourceHandlers() => [] (line: 85)
	


 Desktop detected: Caching DISABLED 




2017-09-15 15:53:04,897 ==== CsapBootConfig.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapBootConfig.onApplicationEvent() => [] (line: 82)
	
 === csap.information:
	 name:  MyDesktop
	 httpPort:  8090
	 lb url:  http://csap-secure.yourcompany.com
	 direct url:  http://PNIGHTIN-M6NYP.yourcompany.com:8090
	 version:  1.0-Desktop
	 workingDir:  null
	 baseContext:  /csap

 === csap.documentation:
	 available at:  /csap/docs

 === csap.locator: 
	 Cache Policies: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/ehcache.xml
	 Cache id: ROUND_ROBIN_CACHE: roundRobinUrlCache
	 Cache id: LOW_RESOURCE_CACHE: lowResourceUrlCache
 
 === csap.performance:
	 JavaSimon Mbean:  org.csap:application=CsapPerformance,name=SimonManager
	 JavaSimon Console Url: /csap/simon
	 Monitored Beans: @CsapMonitor
	 Monitored urls:  / /hello /spring-app/* /spring-rest/* /api/* /jersey/*
	 CsapPerformance MBean:  org.csap:application=CsapPerformance,name=PerformanceMonitor
	 Alert Settings: Report interval: 30 SECONDS
		 In-Memory cache size: 1000
		 Throttle: maximum: 5 per: 1 HOURS
		 Email: Addresses: disabled,  Frequency: 4 HOURS
		 server: outbound.yourCompany.com:25 max: 300ms
		 Limits: [
		health.exceptions occurences-max: 1 collection: 1 MINUTES (Empty instances ignored), 
		oracle.jdbc.sql.insert meanTime: 10.0 ms maxTime: 20.0 ms collection: 30 SECONDS (Empty instances ignored), 
		jms.SimpleJms.processRawMessageForTestScenarios() meanTime: 50.0 ms maxTime: 300 ms collection: 30 SECONDS (Empty instances ignored)]

 === csap.encryptable-properties: 
	 Default algorithm and key loaded from csap.encryptable-properties in application.yaml.
		 Files /etc/csap.token and $HOME/etc/csap.token, and then env vars will be checked for custom settings.
	 token:default used
	 algorithm: PBEWITHMD5ANDDES
	 Resource Location  : class path resource [csapSecurity.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/csapSecurity.properties
	 Resource Location  : class path resource [appSecure.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/appSecure.properties
	 Resource Location  : file [C:\Users\pnightin\csapSecurity.properties] location: file:/C:/Users/pnightin/csapSecurity.properties



2017-09-15 15:53:04,974 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() => [] (line: 201)
	Tomcat started on port(s): 8090 (http)

2017-09-15 15:53:30,947 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 1,
  "lastCollected" : "15:53:30 , Sep 15",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions", "oracle.jdbc.sql.insert", "jms.SimpleJms.processRawMessageForTestScenarios()" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:39:06,044 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 11:39:06,732 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 11:39:06,733 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:hsqldb:mem:testdb
 getUsername: sa
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 25
 Max Total Connections: 5
 getInitialSize: 0
 
==========================



2017-10-19 11:39:08,637 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 11:39:22,322 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 11:39:23,038 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 11:39:23,040 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:hsqldb:mem:testdb
 getUsername: sa
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 25
 Max Total Connections: 5
 getInitialSize: 0
 
==========================



2017-10-19 11:39:25,235 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 11:39:26,373 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-10-19 11:39:26,508 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-10-19 11:39:27,306 ==== Csap_Tester_Application.java ==== thread: restartedMain ==== WARN    >
org.sample.Csap_Tester_Application.addResourceHandlers() => [] (line: 85)
	


 Desktop detected: Caching DISABLED 




2017-10-19 11:39:29,529 ==== CsapBootConfig.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapBootConfig.onApplicationEvent() => [] (line: 82)
	
 === csap.information:
	 name:  MyDesktop
	 httpPort:  8090
	 lb url:  http://csap-secure.yourcompany.com
	 direct url:  http://PNIGHTIN-M6NYP.yourcompany.com:8090
	 version:  1.0-Desktop
	 workingDir:  null
	 baseContext:  /csap

 === csap.documentation:
	 available at:  /csap/docs

 === csap.locator: 
	 Cache Policies: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/ehcache.xml
	 Cache id: ROUND_ROBIN_CACHE: roundRobinUrlCache
	 Cache id: LOW_RESOURCE_CACHE: lowResourceUrlCache
 
 === csap.performance:
	 JavaSimon Mbean:  org.csap:application=CsapPerformance,name=SimonManager
	 JavaSimon Console Url: /csap/simon
	 Monitored Beans: @CsapMonitor
	 Monitored urls:  / /hello /spring-app/* /spring-rest/* /api/* /jersey/*
	 CsapPerformance MBean:  org.csap:application=CsapPerformance,name=PerformanceMonitor
	 Alert Settings: Report interval: 30 SECONDS
		 In-Memory cache size: 1000
		 Throttle: maximum: 5 per: 1 HOURS
		 Email: Addresses: disabled,  Frequency: 4 HOURS
		 server: outbound.yourCompany.com:25 max: 300ms
		 Limits: [
		health.exceptions occurences-max: 1 collection: 1 MINUTES (Empty instances ignored), 
		oracle.jdbc.sql.insert meanTime: 10.0 ms maxTime: 20.0 ms collection: 30 SECONDS (Empty instances ignored), 
		jms.SimpleJms.processRawMessageForTestScenarios() meanTime: 50.0 ms maxTime: 300 ms collection: 30 SECONDS (Empty instances ignored)]

 === csap.encryptable-properties: 
	 Default algorithm and key loaded from csap.encryptable-properties in application.yaml.
		 Files /etc/csap.token and $HOME/etc/csap.token, and then env vars will be checked for custom settings.
	 token:default used
	 algorithm: PBEWITHMD5ANDDES
	 Resource Location  : class path resource [csapSecurity.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/csapSecurity.properties
	 Resource Location  : class path resource [appSecure.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/appSecure.properties
	 Resource Location  : file [C:\Users\pnightin\git\cisco-csap-integration\csapDevelopment\csapSecurity.properties] location: file:/C:/Users/pnightin/git/cisco-csap-integration/csapDevelopment/csapSecurity.properties



2017-10-19 11:39:29,594 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() => [] (line: 201)
	Tomcat started on port(s): 8090 (http)

2017-10-19 11:39:55,157 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 1,
  "lastCollected" : "11:39:55 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions", "oracle.jdbc.sql.insert", "jms.SimpleJms.processRawMessageForTestScenarios()" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:40:25,155 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 2,
  "lastCollected" : "11:40:25 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:40:55,154 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 3,
  "lastCollected" : "11:40:55 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:41:25,153 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 4,
  "lastCollected" : "11:41:25 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:41:55,152 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 5,
  "lastCollected" : "11:41:55 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:42:25,152 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 6,
  "lastCollected" : "11:42:25 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 11:42:52,228 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 11:42:52,896 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 11:42:52,897 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:hsqldb:mem:testdb
 getUsername: sa
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 25
 Max Total Connections: 5
 getInitialSize: 0
 
==========================



2017-10-19 11:42:54,950 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 11:42:55,844 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-10-19 11:42:55,975 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-10-19 11:42:56,640 ==== Csap_Tester_Application.java ==== thread: restartedMain ==== WARN    >
org.sample.Csap_Tester_Application.addResourceHandlers() => [] (line: 85)
	


 Desktop detected: Caching DISABLED 




2017-10-19 11:42:58,696 ==== CsapBootConfig.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapBootConfig.onApplicationEvent() => [] (line: 82)
	
 === csap.information:
	 name:  MyDesktop
	 httpPort:  8090
	 lb url:  http://csap-secure.yourcompany.com
	 direct url:  http://PNIGHTIN-M6NYP.yourcompany.com:8090
	 version:  1.0-Desktop
	 workingDir:  null
	 baseContext:  /csap

 === csap.documentation:
	 available at:  /csap/docs

 === csap.locator: 
	 Cache Policies: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/ehcache.xml
	 Cache id: ROUND_ROBIN_CACHE: roundRobinUrlCache
	 Cache id: LOW_RESOURCE_CACHE: lowResourceUrlCache
 
 === csap.performance:
	 JavaSimon Mbean:  org.csap:application=CsapPerformance,name=SimonManager
	 JavaSimon Console Url: /csap/simon
	 Monitored Beans: @CsapMonitor
	 Monitored urls:  / /hello /spring-app/* /spring-rest/* /api/* /jersey/*
	 CsapPerformance MBean:  org.csap:application=CsapPerformance,name=PerformanceMonitor
	 Alert Settings: Report interval: 30 SECONDS
		 In-Memory cache size: 1000
		 Throttle: maximum: 5 per: 1 HOURS
		 Email: Addresses: disabled,  Frequency: 4 HOURS
		 server: outbound.yourCompany.com:25 max: 300ms
		 Limits: [
		health.exceptions occurences-max: 1 collection: 1 MINUTES (Empty instances ignored), 
		oracle.jdbc.sql.insert meanTime: 10.0 ms maxTime: 20.0 ms collection: 30 SECONDS (Empty instances ignored), 
		jms.SimpleJms.processRawMessageForTestScenarios() meanTime: 50.0 ms maxTime: 300 ms collection: 30 SECONDS (Empty instances ignored)]

 === csap.encryptable-properties: 
	 Default algorithm and key loaded from csap.encryptable-properties in application.yaml.
		 Files /etc/csap.token and $HOME/etc/csap.token, and then env vars will be checked for custom settings.
	 token:default used
	 algorithm: PBEWITHMD5ANDDES
	 Resource Location  : class path resource [csapSecurity.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/csapSecurity.properties
	 Resource Location  : class path resource [appSecure.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/appSecure.properties
	 Resource Location  : file [C:\Users\pnightin\git\cisco-csap-integration\csapDevelopment\csapSecurity.properties] location: file:/C:/Users/pnightin/git/cisco-csap-integration/csapDevelopment/csapSecurity.properties



2017-10-19 11:42:58,758 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() => [] (line: 201)
	Tomcat started on port(s): 8090 (http)

2017-10-19 14:45:01,935 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 14:45:02,372 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== ERROR   >
org.sample.Csap_Tester_Application$DatabaseSettings.setPassword() => [] (line: 401)
	specified password is CHANGE_ME. Set the dbPass environment variable or update application.yml file

2017-10-19 14:46:51,573 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 14:46:52,648 ==== CsapSecurityConfiguration.java ==== thread: localhost-startStop-1 ==== WARN    >
org.csap.integations.CsapSecurityConfiguration.decodeProperty() => [] (line: 405)
	security.dir.password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:46:52,914 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:46:52,914 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:oracle:thin:@csapdb-dev01.cisco.com:1521:dev01
 getUsername: csap_test
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 50
 Max Total Connections: 50
 getInitialSize: 0
 
==========================



2017-10-19 14:46:53,170 ==== DatabaseLookup.java ==== thread: localhost-startStop-1 ==== WARN    >
org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase() => [] (line: 80)
	Unable to determine jdbc url from datasource

org.springframework.jdbc.support.MetaDataAccessException: Could not get Connection for extracting meta data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:339) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:366) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:72) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:139) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:105) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration$$EnhancerBySpringCGLIB$$cf39e51b.CGLIB$jpaVendorAdapter$6(<generated>) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration$$EnhancerBySpringCGLIB$$cf39e51b$$FastClassBySpringCGLIB$$9cc7ff88.invoke(<generated>) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) [spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration$$EnhancerBySpringCGLIB$$cf39e51b.jpaVendorAdapter(<generated>) [spring-boot-autoconfigure-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:220) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1018) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:988) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:579) [spring-orm-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:546) [spring-orm-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:707) [spring-orm-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:680) [spring-orm-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:169) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:354) [spring-orm-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:519) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:508) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1186) [spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.csap.alerts.AlertSettings.initialize(AlertSettings.java:69) [classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:234) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:215) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:91) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:79) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:241) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.selfInitialize(EmbeddedWebApplicationContext.java:228) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.access$000(EmbeddedWebApplicationContext.java:89) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:213) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.springframework.boot.context.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:55) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5196) [tomcat-embed-core-8.5.20.jar:8.5.20]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-8.5.20.jar:8.5.20]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419) [tomcat-embed-core-8.5.20.jar:8.5.20]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) [tomcat-embed-core-8.5.20.jar:8.5.20]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:326) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	... 147 more
Caused by: java.sql.SQLException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'
	at org.apache.commons.dbcp2.BasicDataSource.createConnectionFactory(BasicDataSource.java:2139) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource.createDataSource(BasicDataSource.java:2033) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource.getConnection(BasicDataSource.java:1533) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource$$FastClassBySpringCGLIB$$642adf0.invoke(<generated>) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.csap.integations.CsapPerformance.executeSimon(CsapPerformance.java:109) ~[classes/:?]
	at org.sample.Csap_Tester_Application.dbcpAdvice(Csap_Tester_Application.java:313) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.apache.commons.dbcp2.BasicDataSource$$EnhancerBySpringCGLIB$$58f8c6db.getConnection(<generated>) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:111) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:326) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	... 147 more
Caused by: java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver
	at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:52) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
	at org.apache.commons.dbcp2.BasicDataSource.createConnectionFactory(BasicDataSource.java:2131) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource.createDataSource(BasicDataSource.java:2033) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource.getConnection(BasicDataSource.java:1533) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.apache.commons.dbcp2.BasicDataSource$$FastClassBySpringCGLIB$$642adf0.invoke(<generated>) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.csap.integations.CsapPerformance.executeSimon(CsapPerformance.java:109) ~[classes/:?]
	at org.sample.Csap_Tester_Application.dbcpAdvice(Csap_Tester_Application.java:313) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) ~[spring-aop-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.apache.commons.dbcp2.BasicDataSource$$EnhancerBySpringCGLIB$$58f8c6db.getConnection(<generated>) ~[commons-dbcp2-2.1.1.jar:2.1.1]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:111) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:326) ~[spring-jdbc-4.3.11.RELEASE.jar:4.3.11.RELEASE]
	... 147 more
2017-10-19 14:46:55,047 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 14:46:55,775 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-10-19 14:46:55,888 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-10-19 14:46:56,068 ==== CsapSecurityConfiguration.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapSecurityConfiguration.decodeProperty() => [] (line: 405)
	security.dir.password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:58:11,730 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 14:58:12,841 ==== CsapSecurityConfiguration.java ==== thread: localhost-startStop-1 ==== WARN    >
org.csap.integations.CsapSecurityConfiguration.decodeProperty() => [] (line: 405)
	security.dir.password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:58:13,135 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:58:13,136 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:oracle:thin:@csapdb-dev01.cisco.com:1521:dev01
 getUsername: csap_test
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 50
 Max Total Connections: 50
 getInitialSize: 0
 
==========================



2017-10-19 14:58:16,939 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 14:58:17,699 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-10-19 14:58:17,826 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-10-19 14:58:18,014 ==== CsapSecurityConfiguration.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapSecurityConfiguration.decodeProperty() => [] (line: 405)
	security.dir.password is not encrypted. Use CSAP encrypt to generate

2017-10-19 14:58:18,540 ==== Csap_Tester_Application.java ==== thread: restartedMain ==== WARN    >
org.sample.Csap_Tester_Application.addResourceHandlers() => [] (line: 85)
	


 Desktop detected: Caching DISABLED 




2017-10-19 14:58:20,887 ==== CsapBootConfig.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapBootConfig.onApplicationEvent() => [] (line: 82)
	
 === csap.information:
	 name:  MyDesktop
	 httpPort:  8090
	 lb url:  http://csap-secure.cisco.com
	 direct url:  http://PNIGHTIN-M6NYP.yourcompany.com:8090
	 version:  1.0-Desktop
	 workingDir:  null
	 baseContext:  /csap

 === csap.documentation:
	 available at:  /csap/docs

 === csap.locator: 
	 Cache Policies: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/ehcache.xml
	 Cache id: ROUND_ROBIN_CACHE: roundRobinUrlCache
	 Cache id: LOW_RESOURCE_CACHE: lowResourceUrlCache
 
 === csap.performance:
	 JavaSimon Mbean:  org.csap:application=CsapPerformance,name=SimonManager
	 JavaSimon Console Url: /csap/simon
	 Monitored Beans: @CsapMonitor
	 Monitored urls:  / /hello /spring-app/* /spring-rest/* /api/* /jersey/*
	 CsapPerformance MBean:  org.csap:application=CsapPerformance,name=PerformanceMonitor
	 Alert Settings: Report interval: 30 SECONDS
		 In-Memory cache size: 1000
		 Throttle: maximum: 5 per: 1 HOURS
		 Email: Addresses: disabled,  Frequency: 4 HOURS
		 server: outbound.yourCompany.com:25 max: 300ms
		 Limits: [
		health.exceptions occurences-max: 1 collection: 1 MINUTES (Empty instances ignored), 
		oracle.jdbc.sql.insert meanTime: 10.0 ms maxTime: 20.0 ms collection: 30 SECONDS (Empty instances ignored), 
		jms.SimpleJms.processRawMessageForTestScenarios() meanTime: 50.0 ms maxTime: 300 ms collection: 30 SECONDS (Empty instances ignored)]

 === csap.encryptable-properties: 
	 Default algorithm and key loaded from csap.encryptable-properties in application.yaml.
		 Files /etc/csap.token and $HOME/etc/csap.token, and then env vars will be checked for custom settings.
	 token:default used
	 algorithm: PBEWITHMD5ANDDES
	 Resource Location  : class path resource [csapSecurity.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/csapSecurity.properties
	 Resource Location  : class path resource [appSecure.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/appSecure.properties
	 Resource Location  : file [C:\Users\pnightin\git\cisco-csap-integration\csapDevelopment\csapSecurity.properties] location: file:/C:/Users/pnightin/git/cisco-csap-integration/csapDevelopment/csapSecurity.properties

 === csap.security: 
	 CSRF Enabled (cross site request forgery): false
	 max concurrent user sessions(0=unlimited): 0
	 Cookie: CSAP_SSO
	 Cookie encrypt: MASKED
	 Cookie expire: 86400
	 CSAP security.role.infra: ROLE_AUTHENTICATED
	 CSAP security.role.admin: ROLE_AUTHENTICATED
	 CSAP security.role.build: ROLE_AUTHENTICATED
	 CSAP security.role.view: ROLE_AUTHENTICATED
	 CSAP security.role.superUsers: noSuperUsers
	 Directory url: ldaps://dsx.cisco.com:636/
	 Directory dn: uid={0},ou=ccoentities,o=cco.cisco.com
	 Directory dnGen: uid={0},ou=Generics,o=cco.cisco.com
	 Directory searchUser: ou=groups,o=cco.cisco.com
	 Directory searchGroups: ou=groups,o=cco.cisco.com
	 Directory user: ssplatform.gen
	 ****Custom Acls: org.sample.Csap_Tester_Application$$Lambda$47/1700761772
 
 === csap.security login controller: 
	 Login Page: file:/C:/Users/pnightin/git/csap-starter/csap-starter/target/classes/templates/csap/security/login.html
	 Registered Urls: login, loginError, accessError, sessionError
 
 === csap.security.rest-api-filter: 
	 urls inspected for user and password params: [/demoUrl1/*, /demoUrl2/*, /helloWithRestAcl]
	 group used to verify access: ROLE_AUTHENTICATED
	 seconds to cache before re-athentication: 300
 


2017-10-19 14:58:20,957 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() => [] (line: 201)
	Tomcat started on port(s): 8090 (http)

2017-10-19 14:58:46,842 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 1,
  "lastCollected" : "14:58:46 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions", "oracle.jdbc.sql.insert", "jms.SimpleJms.processRawMessageForTestScenarios()" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 14:59:16,839 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 2,
  "lastCollected" : "14:59:16 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 14:59:46,840 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 3,
  "lastCollected" : "14:59:46 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:00:42,648 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

2017-10-19 15:00:43,379 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 269)
	Password is not encrypted. Use CSAP encrypt to generate

2017-10-19 15:00:43,380 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application.helloDataSource() => [] (line: 293)
	

 ==========================
 Constructed DB Connection Pool with: 
 Url: jdbc:hsqldb:mem:testdb
 getUsername: sa
 getMaxWait: 500
 Time before marked idle: 10000
 getTimeBetweenEvictionRunsMillis: 10000
 Max Idle Connections: 25
 Max Total Connections: 5
 getInitialSize: 0
 
==========================



2017-10-19 15:00:45,588 ==== Csap_Tester_Application.java ==== thread: localhost-startStop-1 ==== WARN    >
org.sample.Csap_Tester_Application$JerseyConfig.<init>() => [] (line: 242)
	Using jersey explicit registration

2017-10-19 15:00:46,677 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.printStartupMessage() => [] (line: 153)
	
 ==========================
 JMS send template: 
	 Connection Factory: org.springframework.jms.connection.SingleConnectionFactory
	 default Destination: csap-test-PNIGHTIN-M6NYP-${HOST}
	 priority: 4
	 Session Ack Mode: 1
	 Time to live: 0
 
==========================


2017-10-19 15:00:46,821 ==== JmsConfig.java ==== thread: restartedMain ==== WARN    >
org.sample.JmsConfig.defaultJmsListenerContainerFactory() => [] (line: 74)
	

 ==========================
 @JmsListener Support: 
	 serverUrl: vm://localhost?broker.persistent=false
	 q name: csap-test-PNIGHTIN-M6NYP-${HOST}
	 concurrency: 1-30
	 maxMessagesPerTask: 1
	 clientId: <host>-JmsListeners
	 receiveTimeout: 5000
==========================



2017-10-19 15:00:47,593 ==== Csap_Tester_Application.java ==== thread: restartedMain ==== WARN    >
org.sample.Csap_Tester_Application.addResourceHandlers() => [] (line: 85)
	


 Desktop detected: Caching DISABLED 




2017-10-19 15:00:49,891 ==== CsapBootConfig.java ==== thread: restartedMain ==== WARN    >
org.csap.integations.CsapBootConfig.onApplicationEvent() => [] (line: 82)
	
 === csap.information:
	 name:  MyDesktop
	 httpPort:  8090
	 lb url:  http://csap-secure.yourcompany.com
	 direct url:  http://PNIGHTIN-M6NYP.yourcompany.com:8090
	 version:  1.0-Desktop
	 workingDir:  null
	 baseContext:  /csap

 === csap.documentation:
	 available at:  /csap/docs

 === csap.locator: 
	 Cache Policies: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/ehcache.xml
	 Cache id: ROUND_ROBIN_CACHE: roundRobinUrlCache
	 Cache id: LOW_RESOURCE_CACHE: lowResourceUrlCache
 
 === csap.performance:
	 JavaSimon Mbean:  org.csap:application=CsapPerformance,name=SimonManager
	 JavaSimon Console Url: /csap/simon
	 Monitored Beans: @CsapMonitor
	 Monitored urls:  / /hello /spring-app/* /spring-rest/* /api/* /jersey/*
	 CsapPerformance MBean:  org.csap:application=CsapPerformance,name=PerformanceMonitor
	 Alert Settings: Report interval: 30 SECONDS
		 In-Memory cache size: 1000
		 Throttle: maximum: 5 per: 1 HOURS
		 Email: Addresses: disabled,  Frequency: 4 HOURS
		 server: outbound.yourCompany.com:25 max: 300ms
		 Limits: [
		health.exceptions occurences-max: 1 collection: 1 MINUTES (Empty instances ignored), 
		oracle.jdbc.sql.insert meanTime: 10.0 ms maxTime: 20.0 ms collection: 30 SECONDS (Empty instances ignored), 
		jms.SimpleJms.processRawMessageForTestScenarios() meanTime: 50.0 ms maxTime: 300 ms collection: 30 SECONDS (Empty instances ignored)]

 === csap.encryptable-properties: 
	 Default algorithm and key loaded from csap.encryptable-properties in application.yaml.
		 Files /etc/csap.token and $HOME/etc/csap.token, and then env vars will be checked for custom settings.
	 token:default used
	 algorithm: PBEWITHMD5ANDDES
	 Resource Location  : class path resource [csapSecurity.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/csapSecurity.properties
	 Resource Location  : class path resource [appSecure.properties] location: file:/C:/Users/pnightin/git/csap-starter/csap-starter-tester/target/classes/appSecure.properties
	 Resource Location  : file [C:\Users\pnightin\git\cisco-csap-integration\csapDevelopment\csapSecurity.properties] location: file:/C:/Users/pnightin/git/cisco-csap-integration/csapDevelopment/csapSecurity.properties



2017-10-19 15:00:49,956 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() => [] (line: 201)
	Tomcat started on port(s): 8090 (http)

2017-10-19 15:01:15,522 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 1,
  "lastCollected" : "15:01:15 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions", "oracle.jdbc.sql.insert", "jms.SimpleJms.processRawMessageForTestScenarios()" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:01:45,517 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 2,
  "lastCollected" : "15:01:45 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ "health.exceptions" ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:02:15,515 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 3,
  "lastCollected" : "15:02:15 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:02:45,516 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 4,
  "lastCollected" : "15:02:45 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:03:15,516 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 5,
  "lastCollected" : "15:03:15 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:03:45,516 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 6,
  "lastCollected" : "15:03:45 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:04:15,517 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 7,
  "lastCollected" : "15:04:15 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:04:45,516 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 8,
  "lastCollected" : "15:04:45 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:05:15,515 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 9,
  "lastCollected" : "15:05:15 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:05:45,515 ==== AlertProcessor.java ==== thread: AlertProcessor_30-1 ==== WARN    >
org.csap.alerts.AlertProcessor.buildHealthReport() => [] (line: 423)
	
 *** HealthReport: 
 {
  "collectionCount" : 10,
  "lastCollected" : "15:05:45 , Oct 19",
  "isHealthy" : false,
  "undefined" : [ ],
  "pendingFirstInterval" : [ ],
  "limitsExceeded" : [ {
    "id" : "org.sample.HealthMonitor.failed",
    "type" : "CustomHealth",
    "description" : "Unable to query JMS: v01app-prd015"
  } ]
}

2017-10-19 15:05:52,794 ==== TomcatEmbeddedServletContainer.java ==== thread: restartedMain ==== INFO    >
org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize() => [] (line: 89)
	Tomcat initialized with port(s): 8090 (http)

